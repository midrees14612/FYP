@page "/"
@using BlazorServerAuthenticationAndAuthorization.Model
@using BlazorServerAuthenticationAndAuthorization.Services
@inject BookService BookService
@using System.Security.Claims
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity?.Name!</h1>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>

<div class="main-home">
    <!-- Hero Section -->
    <section class="hero-section">
        <div class="search-filter-container">
            <input type="text" placeholder="Search for books..." @bind="searchTerm" class="search-input" />
            <button class="btn-search" @onclick="SearchBooks">Search</button>
        </div>

        <div class="filter-container">
            <div class="filter-location">
                <label for="city-filter">Search City:</label>
                <input type="text" id="city-filter" @bind="selectedCity" @oninput="FilterByCity" class="city-input" placeholder="Enter city name" />
            </div>

            <div class="filter-category">
                <label for="category-filter">Filter by Category:</label>
                <select id="category-filter" @onchange="FilterByCategory" class="category-dropdown">
                    <option value="">All</option>
                    <option value="Generic">Generic</option>
                    <option value="Novels">Novels</option>
                    <option value="Science">Science</option>
                    <option value="Religion">Religion</option>
                    <option value="Technology">Technology</option>
                </select>
            </div>
        </div>
    </section>
</div>

<div class="row">
    @if (paginatedBooks != null && paginatedBooks.Count > 0)
    {
        @foreach (var book in paginatedBooks)
        {
            <div class="col-md-4">
                <div class="card mb-4">
                    @if (!string.IsNullOrEmpty(book.ImagePath))
                    {
                        <img src="@book.ImagePath" class="card-img-top" alt="Book Image" />
                    }
                    <div class="card-body">
                        <p class="card-text"><strong>Book Name:</strong> @book.BookName</p>
                        <p class="card-title"><strong>ISBN:</strong> @book.ISBN</p>
                        <p class="card-text"><strong>Author:</strong> @book.Author</p>
                        <p class="card-text"><strong>Publisher:</strong> @book.Publisher</p>
                        <p class="card-text"><strong>Edition:</strong> @book.Edition</p>
                        <p class="card-text"><strong>Condition:</strong> @book.Condition</p>
                        <p class="card-text"><strong>Category:</strong> @book.Category</p>
                        <p class="card-text"><strong>Price:</strong> @string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:C}", book.Price)</p>
                        <p class="card-text"><strong>Cell No:</strong> @book.CellNo</p>
                        @if (book.IsExchangeable)
                        {
                            <div class="exchange-label">Exchangeable</div>
                            <p class="card-text"><strong>Exchangeable With:</strong> @book.ExchangeBookName</p>
                        }
                        <NavLink href="@($"/buynow/{book.Id}")" class="btn btn-primary">View Details</NavLink>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="alert alert-warning text-center" role="alert">
                No books available.
            </div>
        </div>
    }
</div>

<!-- Pagination Controls -->
@if (filteredBooks != null && filteredBooks.Count > 0)
{
    <div class="pagination-container">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
        <span class="page-info">Page @currentPage of @TotalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(currentPage == TotalPages)">Next</button>
    </div>
}

@code {
    private List<Book>? books;           // All books
    private List<Book>? filteredBooks;  // Filtered books for search
    private List<Book>? paginatedBooks; // Books to display on current page
    private string? searchTerm;         // User's search input
    private string? selectedCategory;   // Selected category for filtering
    private string? selectedCity;       // Selected city for filtering

    // Pagination variables
    private int currentPage = 1;
    private const int BooksPerPage = 12;

    // Corrected TotalPages calculation
    private int TotalPages
    {
        get
        {
            // Ensure filteredBooks is not null and handle the case when it's empty
            if (filteredBooks == null)
                return 0;

            return (int)Math.Ceiling((double)filteredBooks.Count / BooksPerPage);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        books = await BookService.GetAllBooksAsync();
        filteredBooks = books; // Show all books by default
        UpdatePaginatedBooks();
    }

    private void UpdatePaginatedBooks()
    {
        if (filteredBooks == null || !filteredBooks.Any())
        {
            paginatedBooks = new List<Book>();
            return;
        }

        // Calculate the start index for the current page
        int startIndex = (currentPage - 1) * BooksPerPage;

        // Take 12 books (or fewer if near the end of the list)
        paginatedBooks = filteredBooks
            .Skip(startIndex)
            .Take(BooksPerPage)
            .ToList();
    }

    private void NextPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
            UpdatePaginatedBooks();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePaginatedBooks();
        }
    }

    private void SearchBooks()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredBooks = books; // Reset to show all books
        }
        else
        {
            filteredBooks = books
                .Where(book => !string.IsNullOrEmpty(book.BookName) &&
                               book.BookName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Reset to first page and update paginated books
        currentPage = 1;
        UpdatePaginatedBooks();
    }

    private void FilterByCategory(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString();
        if (string.IsNullOrEmpty(selectedCategory))
        {
            filteredBooks = books; // Show all books
        }
        else
        {
            filteredBooks = books
                .Where(book => !string.IsNullOrEmpty(book.Category) &&
                               book.Category.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Reset to first page and update paginated books
        currentPage = 1;
        UpdatePaginatedBooks();
    }

    private void FilterByCity(ChangeEventArgs e)
    {
        selectedCity = e.Value?.ToString();
        if (string.IsNullOrEmpty(selectedCity))
        {
            filteredBooks = books; // Show all books
        }
        else
        {
            filteredBooks = books
                .Where(book => !string.IsNullOrEmpty(book.City) &&
                               book.City.Contains(selectedCity, StringComparison.OrdinalIgnoreCase))
                .ToList();
            Console.WriteLine($"Filtered by city: {selectedCity}, Number of books: {filteredBooks.Count}");

            // Debugging: Log the filtered books
            foreach (var book in filteredBooks)
            {
                Console.WriteLine($"Book: {book.BookName}, City: {book.City}");
            }
        }

        // Reset to first page and update paginated books
        currentPage = 1;
        UpdatePaginatedBooks();
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task DisplayGreetingAlert()
    {
        var authState = await authenticationState;
        var message = $"Hello {authState.User.Identity?.Name}";
        await js.InvokeVoidAsync("alert", message);
    }
}

<style>
    /* Main container */
    .main-home {
        font-family: Arial, sans-serif;
        padding: 20px;
    }

    /* Hero Section Styling */
    .hero-section {
        margin: 40px 0;
        text-align: center;
    }

    .search-filter-container {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 20px;
        margin-bottom: 20px;
    }

    /* Search Bar Styling */
    .search-input {
        padding: 10px;
        width: 40%;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
    }

    .btn-search {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s;
    }

        .btn-search:hover {
            background-color: #0056b3;
        }

    /* Filter Categories Styling */
    .filter-container {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        justify-content: space-between;
        margin-top: 20px;
    }

    .filter-location, .filter-category {
        flex: 1;
    }

    .filter-location {
        text-align: left;
    }

    .filter-category {
        text-align: right;
    }

        .filter-location label, .filter-category label {
            font-size: 18px;
            font-weight: bold;
            margin-right: 10px;
        }

    .city-input, .category-dropdown {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
        background-color: #f8f9fa;
        cursor: pointer;
        transition: background-color 0.3s, border-color 0.3s;
    }

        .city-input:hover, .category-dropdown:hover {
            background-color: #e9ecef;
            border-color: #b3b3b3;
        }

    /* Card Styling */
    .row {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
    }

    .col-md-4 {
        flex: 1 1 calc(33.333% - 20px); /* Adjust for gap */
        max-width: calc(33.333% - 20px); /* Adjust for gap */
    }

    .card {
        width: 100%;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        background-color: white;
        text-align: center;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
        position: relative;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

    .card-title {
        font-size: 20px;
        margin: 10px 0;
    }

    /* Remove underlines from card text */
    .card-text {
        text-decoration: none;
        color: inherit;
        margin: 5px 0; /* Add margin between lines */
    }

        .card-text strong {
            font-weight: bold;
            text-decoration: none;
            color: inherit;
        }

    /* Ensure no underlines in the main home section */
    .main-home a {
        text-decoration: none;
        color: inherit;
    }

        .main-home a:hover {
            text-decoration: none;
            color: inherit;
        }

    /* Exchange Label Styling */
    .exchange-label {
        background-color: #ffeb3b;
        color: white;
        padding: 5px;
        border-radius: 5px;
        font-size: 14px;
        font-weight: bold;
        position: absolute;
        top: 10px;
        left: 10px;
    }

    /* Pagination Styles */
    .pagination-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
        gap: 15px;
    }

        .pagination-container .btn {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .pagination-container .btn:disabled {
                background-color: #6c757d;
                cursor: not-allowed;
            }

    .page-info {
        font-size: 16px;
        font-weight: bold;
    }
</style>

<SurveyPrompt Title="How is Blazor working for you?" />
