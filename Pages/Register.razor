@page "/register"
@using BlazorServerAuthenticationAndAuthorization.Authentication
@using BlazorServerAuthenticationAndAuthorization.Data
@using Microsoft.AspNetCore.Components.Forms
@inject UserAccountService UserAccountService
@inject NavigationManager Navigation

<EditForm Model="newUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="register-container">
        <h2>Register</h2>
        <div>
            <label>Email:</label>
            <InputText @bind-Value="newUser.Email" />
            @if (!string.IsNullOrEmpty(emailMessage))
            {
                <div class="error-message">@emailMessage</div>
            }
        </div>
        <div>
            <label>Username:</label>
            <InputText @bind-Value="newUser.UserName" />
        </div>
        <div>
            <label>Password:</label>
            <InputText @bind-Value="newUser.Password" type="password" />
        </div>
        <div>
            <label>Role:</label>
            <InputSelect @bind-Value="newUser.Role">
                <option value="User">User</option>
                <option value="Administrator">Administrator</option>
            </InputSelect>
        </div>
        <button type="submit" class="register-button">Register</button>
        <div class="login-link">
            <a href="/login">Already have an account? Login here</a>
        </div>
    </div>
</EditForm>

@code {
    private UserInfo newUser = new UserInfo();
    private string emailMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(newUser.Email))
        {
            emailMessage = "Email is required.";
            return;
        }

        var existingUser = await UserAccountService.GetByEmailAsync(newUser.Email);
        if (existingUser != null)
        {
            emailMessage = "Email already exists.";
        }
        else
        {
            var result = await UserAccountService.CreateUserAsync(newUser);
            if (result)
            {
                Navigation.NavigateTo("/login");
            }
        }
    }
}

<style>
    .register-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .register-container h2 {
            text-align: center;
            margin-bottom: 20px;
        }

        .register-container label {
            display: block;
            margin-bottom: 5px;
        }

        .register-container input, .register-container select {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

    .register-button {
        width: 100%;
        padding: 10px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 3px;
        cursor: pointer;
    }

        .register-button:hover {
            background-color: #218838;
        }

    .login-link {
        text-align: center;
        margin-top: 10px;
    }

        .login-link a {
            color: #007bff;
            text-decoration: none;
        }

            .login-link a:hover {
                text-decoration: underline;
            }

    .error-message {
        color: red;
        margin-top: 5px;
    }
</style>
