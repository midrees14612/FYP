@page "/profile"
@using BlazorServerAuthenticationAndAuthorization.Data
@using BlazorServerAuthenticationAndAuthorization.Model
@using BlazorServerAuthenticationAndAuthorization.Authentication
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AppDbContext DbContext
@inject NavigationManager Navigation

<PageTitle>Profile</PageTitle>

@if (!isAuthenticated)
{
    <p>You must log in to view this page.</p>
}
else if (isLoading)
{
    <p>Loading user data...</p>
}
else if (userInfo == null)
{
    <p>No user data found. Please contact support.</p>
}
else
{
    <div class="profile-container">
        <h1>@userInfo.UserName</h1>
        <p><strong>Email:</strong> @userInfo.Email</p>
        <p><strong>Phone:</strong> @userInfo.Phone</p>
        <p><strong>Location:</strong> @userInfo.Location</p>
        <p><strong>Bio:</strong> @userInfo.Bio</p>
        @if (!string.IsNullOrEmpty(userInfo.ProfilePicture))
        {
            <img src="data:image/jpeg;base64,@userInfo.ProfilePicture" alt="Profile Picture" style="max-width: 100px;" />
        }

        <button @onclick="ToggleEditMode">Edit Profile</button>

        @if (isEditMode)
        {
            <form @onsubmit="SaveProfile">
                <label>Phone:</label>
                <input type="text" @bind="userInfo.Phone" placeholder="Phone" />
                <label>Location:</label>
                <input type="text" @bind="userInfo.Location" placeholder="Location" />
                <label>Bio:</label>
                <textarea @bind="userInfo.Bio" placeholder="Bio"></textarea>
                <label>Profile Picture:</label>
                <InputFile OnChange="HandleFileSelected" />
                <button type="submit">Save</button>
                <button type="button" @onclick="ToggleEditMode">Cancel</button>
            </form>
        }
    </div>
}

@code {
    private UserInfo? userInfo { get; set; }
    private bool isEditMode = false;
    private bool isAuthenticated = false;
    private bool isLoading = true;
    private IBrowserFile? profilePictureFile;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            isAuthenticated = user.Identity?.IsAuthenticated ?? false;

            if (isAuthenticated)
            {
                var email = user.FindFirstValue(ClaimTypes.Email);

                if (!string.IsNullOrEmpty(email))
                {
                    // Fetch userInfo data
                    userInfo = await DbContext.UserInfo.FirstOrDefaultAsync(u => u.Email == email);

                    // Log to confirm data retrieval
                    Console.WriteLine(userInfo != null ? "User loaded successfully." : "User not found.");
                }
            }
            else
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user profile: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleEditMode()
    {
        isEditMode = !isEditMode;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        profilePictureFile = e.File;
    }

    private async Task SaveProfile()
    {
        if (userInfo != null)
        {
            try
            {
                if (profilePictureFile != null)
                {
                    var buffer = new byte[profilePictureFile.Size];
                    await profilePictureFile.OpenReadStream().ReadAsync(buffer);
                    userInfo.ProfilePicture = Convert.ToBase64String(buffer);
                }

                DbContext.UserInfo.Update(userInfo);
                await DbContext.SaveChangesAsync();

                // Fetch updated user data
                var email = userInfo?.Email;
                if (!string.IsNullOrEmpty(email))
                {
                    userInfo = await DbContext.UserInfo.FirstOrDefaultAsync(u => u.Email == email);
                }

                isEditMode = false;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving user profile: {ex.Message}");
            }
        }
    }
}

<style>
    .profile-container {
        max-width: 600px;
        margin: 20px auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .profile-container h1 {
            font-size: 24px;
            margin-bottom: 20px;
        }

        .profile-container p {
            margin: 10px 0;
        }

        .profile-container button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            .profile-container button:hover {
                background-color: #0056b3;
            }

        .profile-container form {
            margin-top: 20px;
        }

            .profile-container form label {
                display: block;
                margin: 10px 0 5px;
                font-weight: bold;
            }

            .profile-container form input,
            .profile-container form textarea {
                width: 100%;
                padding: 10px;
                margin-bottom: 10px;
                border: 1px solid #ddd;
                border-radius: 4px;
                box-sizing: border-box;
            }

            .profile-container form button[type="submit"],
            .profile-container form button[type="button"] {
                margin-top: 10px;
                padding: 10px 20px;
                background-color: #28a745;
                color: #fff;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

                .profile-container form button[type="submit"]:hover,
                .profile-container form button[type="button"]:hover {
                    background-color: #218838;
                }
</style>
